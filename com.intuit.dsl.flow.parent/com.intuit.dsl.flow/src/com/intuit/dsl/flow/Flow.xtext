grammar com.intuit.dsl.flow.Flow with com.intuit.graphql.GraphQL 
generate flow "http://www.intuit.com/dsl/flow/Flow"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.intuit.com/graphql/GraphQL" as graphql


Model:
  query+=QueryDefinition*
  type+=TypeSystemDefinition*
  node+=Node*;

Node returns graphql::ObjectTypeDefinition:
  State  | Schema 
;

State:
  Flow  | Service | Mapping | SchemaAssignment | Rulebase | GraphQLService

;

GraphQLService:
	(sync='synchronous')? (verbose='verbose')? 'GraphQLService' id=ID 'graphqlQuery' query=QueryModel '{'
		('Url ->' '${'url=Expression'}')
		('Path ->' '${'path=Expression'}')?
		('Timeout ->' '${'timeout=Expression'}')?
  		('Retry ->' '${'retryCount=Expression'}')?
		(variables+=GraphQLVariable)*
		(headerOrQueryOrPathParam+=HeaderORQueryOrPathParam)*
	'}'
;

GraphQLVariable :
	'@Variable' key=STRING '->' '${'exp=Expression'}'
;

Rulebase:
	'Rulebase' (async?='asynchronous')? id=UID '{'
		rules+=NewRule+
	'}'
;

NewRule:
	'Rule' id=UID ('with [' modifiers+=UID(','modifiers+=UID)*']')? 'using' (inputModel+=InPutModel)(',' inputModel+=InPutModel)* 'inject' injectedTopicId=UID ('withValue' outputModel=InPutModel)? 'when' condition=BooleanExpression
;

StartState:
  'Start' start=[State] '{'
  ('transition' '{'
  transition=Transition
  '}')?
  '}'
;

TransitionState:
  state=[State] '{'
  ('transition' '{'
  transition=Transition
  '}')?
  '}'
;

Flow:
  'Flow' id=ID '{'
  startState = StartState
  transitionStates += TransitionState*
  '}'
;

Transition:
  expression=Expression '?' trueState=Transition ':' falseState=Transition |
  ('when' caseExpressions+=Expression 'then' caseStates+=[TransitionState])+ ('otherwise' 'do' defaultState=[TransitionState]) |
  transition=[TransitionState]
;

Mapping:
  'Mapping' id=ID
  ('input' inputModel+=(InPutModel)
  (',' inputModel+=(InPutModel))*
  'output' outputModel=OutPutModel)
  '{'
  statement+=Statement*
  '}'
;

RuleCaseStatement:
  (type='when') '(' expr=BooleanExpression ')' '{' statement+=Statement* '}'
;
  
Statement:
  log='log'? statement=(Select | VariableStatement | TernaryExpression | RuleCaseStatement )
;

Select:
  'Select' ('*' | (column+=Column(','column+=Column)*)) ('into' outputModel=SchemaVariable)? 'from' table+=TableName(','table+=TableName)? 'where' expression=Expression groupBy=GroupBy? order=Order?
;
TableName:
  key+=AllowedKeyword('.'key+=AllowedKeyword)* ('as' resultKey=AllowedKeyword)?
;

Column:
  (exp=Expression | agg=AggregateFunction) 'as' resultKey+=Key('.'resultKey+=Key)*
;

AggregateFunction:
	SumFunc | CountFunc
;

SumFunc:
	'sum(' exp=Expression ')'
;

CountFunc:
	{CountFunc} 'count(' ('*' | exp=Expression) ')'
;

GroupBy:
	'group by' variable=SchemaVariable
;

Order:
	{Order} 'order by' variable=SchemaVariable type=ORDER_TYPE
;

InPutModel:
  {InPutModel}schema=[graphql::ObjectTypeDefinition] ('as' id=ID )?
;

OutPutModel:
  {OutPutModel}schema=[graphql::ObjectTypeDefinition] ('as' id=ID)?
;

QueryModel:
  {QueryModel}query=[graphql::OperationDefinition] 'as' id=ID 
;

AliasModel:
	'as' id=AllowedKeyword
;

OutputOrAlias:
	OutPutModel | AliasModel
;


Service:
  (sync='synchronous')? (verbose='verbose')? 'Service' type=ID 'as' id=ID 
  'method' method=ServiceType ('foreach' iterator=SchemaVariable 'as' iteratoralias=AllowedKeyword)?
  ('input' inputModel=[graphql::ObjectTypeDefinition])? 
  ('output' (outputModel=OutputOrAlias))? '{'
  
  (('Url ->' url=Property)? | ('Url ->' '${'url=Expression'}')?)
  ('UrlEncoding ->' urlEncoding=EncodingMode)?
  ('Path ->' '${'path=Expression'}')?
  ('ProxyHost ->' '${'proxyhost=Expression'}')?
  ('ProxyPort ->' '${'proxyport=Expression'}')?
  ('Timeout ->' '${'timeout=Expression'}')?
  ('Retry ->' '${'retryCount=Expression'}')?
  (arguments+=ServiceArguments)*
  (requestArguments+=RequestArgument)*
  '}'
;


RequestArgument:
  HeaderORQueryOrPathParam | RequestBody
;

RequestBody:
	'@' type='Body' key=(ID | STRING)? '->' '${'exp=Expression'}'	
;

HeaderORQueryOrPathParam:
	'@'type=('Query'|'Header'|'PathParam') key=(ID | STRING) '->' '${'exp=Expression'}'
;

ServiceArguments:
  key=ID '->' (at='@')? value=( ID | STRING )
;

ServiceType :
  'GET' | 'POST' | 'PUT' | 'DELETE'
;

EncodingMode :
  'NONE' | 'URI_COMPONENT' | 'VALUES_ONLY' | 'TEMPLATE_AND_VALUES'
;

//---------------//----------------//----------------//---------------//

SchemaAssignment:
  'value' id=AllowedKeyword '->' schema=[Schema]
  value = (ObjectValue | ArrayValue)
;

@Override 
ObjectValue: '{'
  values+=ObjectContent+
  '}'
;

ObjectContent:
  id=AllowedKeyword objectValue=ObjectValue
  |
  id=AllowedKeyword arrayValue=ArrayValue
  |
  id=AllowedKeyword ':' primitiveValue=Value
  |
  id=AllowedKeyword '->' schemaAssignment=[SchemaAssignment]
;

@Override 
ArrayValue:
  {ArrayValue} '[' objectValue+=ObjectValue+ ']'
  |
  {ArrayValue} '[' primitiveValue+=Value+ ']'
  |
  {ArrayValue} '[' arrayValue+=ArrayValue+ ']'
  |
  {ArrayValue} '[' schemaAssignment+=[SchemaAssignment]+ ']'

;
@Override 
Value:
  primitive=Primitive  | '${'expressionValue=Expression'}'
;

Primitive:
  STRING  | NUMBER | BOOLEAN
;

BOOLEAN:
  'true' | 'false'
;

//---------------//----------------//----------------//---------------//

Annotation:
	"@"name=ID
;

Schema:    
  'Schema' id=AllowedKeyword '{'
  schema=(Data)
  '}'
;


Data:
  entity+=Entity+
;

Entity :
  (annotation=Annotation)? name=AllowedKeyword op='{'
  	entity+=Entity*
  '}'
  |
  (annotation=Annotation)? name=AllowedKeyword op='['
  	entity+=Entity+
  ']'
  |
  (annotation=Annotation)? name=AllowedKeyword op='->' schema=[graphql::ObjectTypeDefinition]
  |
  (annotation=Annotation)? (type=DataType|schema=[graphql::ObjectTypeDefinition]) (op="[]")? name=AllowedKeyword
;



DataType:
  'string' | 'boolean' | 'number' 
;

//---------------//----------------//----------------//---------------//


@Override 
Variable:
  schemaVariable=SchemaVariable
;

VariableStatement:
  schemaVariable=SchemaVariable '=' expression=Expression ("{"range=Range"}")?
  ('->' ('('condition=BooleanExpression')')? '{'
  (statement+=MapStatement)+
  '}')?
;

Key:
  id=AllowedKeyword(=>'['exp=Expression']')?
;

SchemaVariable:
  (global='::')?key+=Key('.'key+=Key)*
;

Property:
  '@Config('key=STRING')'
;

Expression:
  BooleanExpression;

BooleanExpression returns Expression:
  Comparison
  (({BooleanExpression.left=current} op=("||"|"&&"|"and"|"or")) right=Comparison)*;

Comparison returns Expression:
  Membership
  (({Comparison.left=current} op=("<" | ">" | "<=" | ">=")) right=Membership)*;

Membership returns Expression:
  Equals
  (({Membership.left=current} op=("in" | "not_in")) "[" right+=Expression(',' right+=Expression)* "]")*;

Equals returns Expression:
  Addition
  (({Equals.left=current} op=("==" | "!=" | "=~" | "!~" | "is") ) right=Addition)*;

Addition returns Expression:
  Multiplication
  (({Plus.left=current} '+' | {Minus.left=current} SIGN)
  right=Multiplication)*;

Multiplication returns Expression:
  Prefixed (({MultiOrDivOrModPow.left=current} op=("*"|"/"|"%"|"^")) right=Prefixed)*;

Prefixed returns Expression:
  {BooleanNegation} =>"!" expression=Atomic | /* right associativity */
  {ArithmeticSigned} => SIGN expression=Atomic | /* right associativity */
  Atomic;

Atomic returns Expression:
  TernaryExpression |
  ArrayExpression |
  '(' Expression ')' |
  {NumberLiteral} value=NUMBER |
  {StringLiteral} value=STRING |
  {FunctionReference} ref=Function |
  {NullLiteral} value= 'null' |
  {BooleanLiteral} value=('true'|'false') |
  {VariableReference} ref=Variable |
  {PropertyExpresssion} ref=Property |
  {StringifyExpression} '`'valueRef=[ecore::EObject] '`'
;

TernaryExpression:
  'if' expression=BooleanExpression
  'then' truevalue=BooleanExpression
  ('else' falsevalue=BooleanExpression)?
;

ArrayExpression:
	{ArrayExpression} '[' expression+=Expression(',' expression+=Expression)* ']'
;

Function:
  CustomFunction | CollectionFunction | Join | Length | DateFormat | Delete | Contains | DayDifference | CurrentDate | PickFirst | Extract | TranslateUnicode | AddToDate | CurrencyFormat | Shuffle | Replace
;

CustomFunction:
'custom('id=STRING (','arguments+=CustomFunctionArguments)* ')'
;

CollectionFunction:
  function=CollectionFunctionCall ('[' refexp=Expression ']')?('.'resultKey+=Key)*
;

CollectionFunctionCall:
  RemoveFunc | FindFirstFunc | FilterFunc | MapFunc | Split | Json | ConcatFunc | SortFunc | DedupFunc | LastFunc | ParentFunc | LowerFunc | UpperFunc | UUIDFunc
;

ParentFunc:
	'parent(' exp=Expression ')'
;

LastFunc:
	'last(' exp=Expression ')'
;

Delete:
  'delete(' variable = Variable ')'
;


Split:
  'split('exp=Expression','regex=STRING')'
;

Contains:
  'contains('input=Expression','search=Expression')'
;

Extract:
  'extract('input=Expression','range=Range')'
;

DateFormat:
  'dateFormat' '(' from=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' to=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' exp=Expression (',' fromTimeZone=(Expression) ',' toTimeZone=(Expression) )? ')'
;

CurrencyFormat:
  'currencyFormat' '(' exp=Expression (','to=('DECIMAL' | 'INTEGER'))? ')'
;

Shuffle:
	'shuffle('exp=Expression')'
;

AddToDate:
	'addToDate' '(' dateExp=Expression ',' format=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING) ',' exp=Expression ',' type=('Days') ')'
;

FilterFunc:
  'filter('exp=Expression','condtion=BooleanExpression')'
;

FindFirstFunc:
  'findFirst' '('exp=Expression',' condition=BooleanExpression')'
;

RemoveFunc:
  'remove' '(' exp=Expression ',' condition=BooleanExpression')'
;

SortFunc:
  'sort('exp=Expression','key=SchemaVariable (','type=ORDER_TYPE)?')'
;

DedupFunc:
  'dedup('exp=Expression (','key=SchemaVariable)?')'	
;

ORDER_TYPE:
	'ascending' | 'descending'
;

MapFunc:
  'map('exp=Expression ("{"range=Range"}")? ('as' aliasKey=AllowedKeyword)? '->'(returnexp=Expression | '{'
   ((statement+=MapStatement)+)
  	'}')
  ')'
;

Range:
  (low=Expression)? diff=".." (high=Expression)?
;

MapStatement:
  resultKey+=Key('.'resultKey+=Key)* '=' exp=Expression
;

ConcatFunc:
  'concat('exp+=Expression (','exp+=Expression)+ ')'
;

Length:
  'length('exp=Expression')'
;

LowerFunc:
	'lowerCase('exp=Expression')'
;

UpperFunc:
	'upperCase('exp=Expression')'
;

UUIDFunc:{UUIDFunc}
	'uuid()'
;

Json:
  'json('exp=SchemaVariable')'
;

Join:
  'join('exp=Expression(','key=SchemaVariable)?','delimiter=STRING(','last=STRING)? ')'

;

DayDifference:
  'dayDifference('from=Expression','to=Expression',' formatter=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"') ')'
;

Replace:
	'replace('text=Expression','searchString=Expression','replacement=Expression')'
;

TranslateUnicode:
	'translateUnicode('exp=Expression')'
;
		CurrentDate:
			{CurrentDate} 'currentDate('format=('\"MM/dd/yyyy\"' | '\"yyyyMMdd\"' | '\"yyyy-MM-dd\"' | '\"ms\"' | STRING)?')'
;

PickFirst:
  'pickFirst('exp+=Expression (','exp+=Expression)+ '->' condition=Comparison ')'
;

CustomFuction:
  'custom('id=STRING (','arguments+=CustomFunctionArguments*)? ')'
;

CustomFunctionArguments:
	value=Expression 'as' key=ID
;

AllowedKeyword:
  ('$')?(Name |'GET' | 'POST' | 'PUT' | 'DELETE'| 'join' | 'length' | 'filter' | 'value' | 'delete' |  'form' | 'cursor' | 'operation' |
	'path' | 'it' | 'field' | 'default' | 'template' | 'uuid' | 'where' | 'select' | 'on' | 'output' | 'row' | 'TEMPLATE_AND_VALUES' | 
	'VALUES_ONLY' | 'URI_COMPONENT' | 'NONE'| 'dateFormat' | 'format');


NUMBER returns ecore::EBigDecimal:
  INT | (INT '.' INT)
;

UID: ID (SIGN ID)*;